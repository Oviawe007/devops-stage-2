# version: '3.9'

# services:
#   db:
#     image: postgres:13
#     container_name: database
#     restart: always
#     env_file:
#       - backend/.env
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data_3:/var/lib/postgresql/data
#     networks:
#       - mynet
    

#   adminer:
#     image: adminer
#     restart: always
#     networks:
#       - mynet

#   backend:
#     build: ./backend
#     container_name: backend
#     command:  bash -c "poetry run bash ./prestart.sh && poetry run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
#     depends_on:
#       - db
#     env_file:
#       - backend/.env
#     networks:
#       - mynet
  
#   frontend:
#     build: ./frontend
#     container_name: frontend  # Adjusted to mount only frontend directory
#      # Changed frontend port to avoid conflict with backend
#     env_file:
#       - frontend/.env
#     networks:
#       - mynet

#   nginx:
#     image: nginx:latest
#     container_name: nginx
#     volumes:
#       - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
#     ports:
#       - "80:80"
#       - "8080:8080"
#     depends_on:
#       - frontend
#       - backend
#       - adminer
#     networks:
#       - mynet

#   traefik:
#     image: traefik:v2.4
#     container_name: traefik
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./traefik.yml:/etc/traefik/traefik.yml
#     ports:
#       - "8090:8090"
#     networks:
#       - mynet


# volumes:
#   postgres_data_3:

# networks:
#   mynet:



version: '3.8'

services:
 frontend:
   build: ./frontend
   labels:
     - "traefik.enable=true"
     - "traefik.http.routers.frontend.rule=Host(`localhost`)"
     - "traefik.http.services.frontend.loadbalancer.server.port=80"
   networks:
     - web

 backend:
   build: ./backend
   environment:
     DATABASE_URL: postgres://app:changethis123@postgres/app
   labels:
     - "traefik.enable=true"
     - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
     - "traefik.http.services.backend.loadbalancer.server.port=8000"
   networks:
     - web
   depends_on:
     - postgres

 postgres:
   image: postgres:14
   hostname: postgres-server # This sets the server name
   environment:
     POSTGRES_DB: app
     POSTGRES_USER: app
     POSTGRES_PASSWORD: changethis123
   volumes:
     - pgdata:/var/lib/postgresql/data
   networks:
     - web
   ports:
   - "5432:5432"

 adminer:
   image: adminer
   restart: always
   ports:
     - 8080:8080
   networks:
     - web

 nginx-proxy-manager:
   image: jc21/nginx-proxy-manager:latest
   restart: always
   ports:
     - 80:80
     - 81:81
     - 443:443
   environment:
     DB_SQLITE_FILE: "/data/database.sqlite"
   volumes:
     - ./data:/data
     - ./letsencrypt:/etc/letsencrypt
   networks:
     - web

volumes:
 pgdata:

networks:
 web: